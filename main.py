import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = ''
WEB_APP_URL = ''
SUBSCRIPTIONS = set()  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ë–î)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

def get_main_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEB_APP_URL)))
    builder.row(
        InlineKeyboardButton(
            text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data="subscribe"),
        InlineKeyboardButton(
            text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data="unsubscribe"))
    return builder.as_markup()

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/auth - –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "üîπ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@router.message(Command("help"))
async def help_handler(message: types.Message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìö <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "<code>/start</code> - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
        "<code>/help</code> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "<code>/auth</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "<code>/webapp</code> - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "üî∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' –≤ –º–µ–Ω—é\n\n"
        "üî∏ <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ:\n"
        "<code>/webapp</code> –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"
    )
    await message.answer(help_text)

@router.message(Command("auth"))
async def auth_handler(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
    """
    user = message.from_user
    auth_text = (
        "üîë <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n\n"
        f"üÜî <b>Telegram ID:</b> <code>{user.id}</code>\n"
        f"üë§ <b>–ò–º—è:</b> {user.first_name}\n"
        f"üìõ <b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üì± <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        "<i>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ</i>"
    )
    await message.answer(auth_text)

@router.message(Command("webapp"))
async def webapp_handler(message: types.Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        web_app=WebAppInfo(url=WEB_APP_URL)))
    await message.answer(
        "üì≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=builder.as_markup())

@router.callback_query(F.data == "subscribe")
async def subscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    SUBSCRIPTIONS.add(user_id)
    await callback.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
        show_alert=True)

@router.callback_query(F.data == "unsubscribe")
async def unsubscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    SUBSCRIPTIONS.discard(user_id)
    await callback.answer(
        "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        show_alert=True)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
